set -o allexport && source "/etc/pve/psql/env" && set +o allexport
export PSQL_HOME=`getent passwd postgres | cut -d: -f6`
export PSQL_GID=`getent passwd postgres | cut -d: -f4`

is_quorate(){
    jq -e '.cluster.quorate == 1' /etc/pve/.members > /dev/null
}

is_pve_primary(){
  jq -e ".master_node == \"`hostname`\"" /etc/pve/ha/manager_status > /dev/null
}

current_pve_primary(){
  jq -r ".master_node" /etc/pve/ha/manager_status
}

is_psql_primary(){
local host
local primary
primary=`current_psql_primary`
for host in `hostname -i` `hostname` `hostname -f`;do
    if [ "$primary" = "$host" ]; then
        return 0
    fi
done
return 1
}

conninfo_host(){
  python3 -c "import psycopg;print(psycopg.conninfo.conninfo_to_dict('${1:?}')['host'])"
}

current_psql_primary(){
  local conninfo
  conninfo=`grep '\* *=' $PGBOUNCER_DATABASE_INI | sed 's/[^=]*= *\(.*\)/\1/'`
  conninfo_host "$conninfo"
}

unquote(){
  quoted=$1
  type=${2:-'"'}
  unquoted=${quoted#*"$type"}
  unquoted=${unquoted%"$type"*}
  echo "$unquoted"
}

load_psql_conf(){
  local path
  local prefix
  path=${1:?}
  prefix=${2:?}
  while IFS= read -r line; do
    name=$(echo "$line"| cut -d= -f1)
    value=$(unquote "$(echo "$line"| cut -d= -f2-)" "'")
    if [ -n "$name" ]; then
      name=$prefix$name
      name=${name// /_}
      name=${name^^}
      read -d"\0" "$name" <<<"$value"
    fi
  done <<< "$(sed 's/^\s*\([^= ]*\)*\s*=\s*\(.*\)/\1=\2/' "$path" | grep "=" | grep -v "^\s*#" )" || true  
}

parse_repmgr_csv(){
  prefix=${1:-''}
  while IFS= read -r line; do
    name=$(unquote "$(echo "$line"| cut -d, -f1)")
    value=$(unquote "$(echo "$line"| cut -d, -f2-)")
    if [ -n "$name" ]; then
      name=$prefix$name
      name=${name// /_}
      name=${name^^}
      read -d"\0" "$name" <<<"$value"
    fi
  done
}

pathprepend() {
  for ((i=$#; i>0; i--)); 
  do
    ARG=${!i}
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        export PATH="$ARG${PATH:+":$PATH"}"
    fi
  done
}
pathprepend "$PSQL_BIN"

filesync(){
    local src
    local dst
    src=${1:?}
    dst=${2:?}

    if [ -L "$dst" ] || ! [ -e "$src"  ] || ! [ -e "$dst"  ] || ! cmp --silent  "$src" "$dst";then
      if [ -e "$dst"  ]; then
        rm -f "$dst"
      fi
      cat "$src" > "$dst"
    else
      return 1
    fi
}


_pgpass="$HOME/.pgpass"

if [ -e "$PSQL_CLUSTER_PASSFILE" ]; then
  if filesync "$PSQL_CLUSTER_PASSFILE" "$_pgpass"; then
    chmod 600 "$_pgpass" 2> /dev/null || true
  fi
fi

pve_repmgr() {
    su postgres -c '"$0" "$@"' -- "$PSQL_BIN/repmgr" -f "$REPMGR_CONF" "$@"
}

if [ "`whoami`" = 'root' ]; then
alias repmgr=pve_repmgr
else
alias repmgr="'$PSQL_BIN/repmgr' -f '$REPMGR_CONF'"
fi